{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Community Contributions to Materials Project \u00b6 Since its start in 2011, Materials Project (MP) has grown into a world-wide resource for a materials sciences community of more than 75,000 users who rely on the portal as a trusted source to accelerate their research. As a result, they wish to help with MP's efforts by contributing back, but also ask for support in sharing their experimental and computational datasets alongside MP's curated results. This provides the opportunity for researchers in both domains to validate calculations or measurements almost instantaneously and use the disseminated data for integrated materials studies. With the public announcement of our general contribution framework, MPContribs, we present a sustainable solution for well-curated data management, organization and dissemination in the context of MP. The framework serves the purpose of collectively maintaining contributions to MP community databases as annotations to existing MP materials. It subsequently disseminates them through MP's materials details pages as well as its portal and API . Visit the MPContribs Portal Checkout the MPContribs API Join the Slack Channel Post issues in GitHub Repo","title":"Home"},{"location":"#community-contributions-to-materials-project","text":"Since its start in 2011, Materials Project (MP) has grown into a world-wide resource for a materials sciences community of more than 75,000 users who rely on the portal as a trusted source to accelerate their research. As a result, they wish to help with MP's efforts by contributing back, but also ask for support in sharing their experimental and computational datasets alongside MP's curated results. This provides the opportunity for researchers in both domains to validate calculations or measurements almost instantaneously and use the disseminated data for integrated materials studies. With the public announcement of our general contribution framework, MPContribs, we present a sustainable solution for well-curated data management, organization and dissemination in the context of MP. The framework serves the purpose of collectively maintaining contributions to MP community databases as annotations to existing MP materials. It subsequently disseminates them through MP's materials details pages as well as its portal and API . Visit the MPContribs Portal Checkout the MPContribs API Join the Slack Channel Post issues in GitHub Repo","title":"Community Contributions to Materials Project"},{"location":"api/","text":"Programmatically retrieve MPContribs Data \u00b6 The MPContribs API provides programmatic access to experimental and theoretical data contributed by the MP community. Project information is retrievable through the projects resource, and the corresponding contributed data through the contributions resource. Each project can contain many contributions for an MP material or composition. Each contribution in turn consists of three (optional) components: free-form hierarchical data, tabular data, and crystal structures. There are separate dedicated resource endpoints for tables and structures both of which are referenced in the contributions. To get started, install the python client library mpcontribs-client for the MPContribs API: pip install mpcontribs-client Then get your API key from the MPContribs Dashboard and set up the client: from mpcontribs.client import load_client client = load_client ( \"your-api-key-here\" ) dir ( client ) # show available resources Check out the API Docs for more details about the available resources and operations shown below. The docs can also be used to try out the API in the browser. Note Only the operation methods are shown in the following sections. You can make the actual request and access the response via response() and result , respectively: operation = client . projects . get_entries () resp = operation . response () # make blocking http request print ( resp . result ) # access the API response (result of the request) Projects \u00b6 Fields \u00b6 field description project short URL-compatible name title short title to fit on contribution cards authors comma-separated list of authors description paragraph to describe project/dataset urls list of references in form of URLs other optional free-form content applicable to all contributions Operations \u00b6 Entries \u00b6 # retrieve list of all available projects/datasets client . projects . get_entries () # search projects for keywords client . projects . get_entries ( search = 'bandgap values' ) # use mask to control which fields to retrieve client . projects . get_entries ( mask = [ 'project' , 'authors' ]) Entry \u00b6 # get info about specific project/dataset client . projects . get_entry ( project = 'dtu' ) # use mask to control which fields to retrieve client . projects . get_entry ( project = 'dtu' , mask = [ 'description' ]) Table \u00b6 Graph \u00b6 Contributions \u00b6 Tables \u00b6 Structures \u00b6","title":"API"},{"location":"api/#programmatically-retrieve-mpcontribs-data","text":"The MPContribs API provides programmatic access to experimental and theoretical data contributed by the MP community. Project information is retrievable through the projects resource, and the corresponding contributed data through the contributions resource. Each project can contain many contributions for an MP material or composition. Each contribution in turn consists of three (optional) components: free-form hierarchical data, tabular data, and crystal structures. There are separate dedicated resource endpoints for tables and structures both of which are referenced in the contributions. To get started, install the python client library mpcontribs-client for the MPContribs API: pip install mpcontribs-client Then get your API key from the MPContribs Dashboard and set up the client: from mpcontribs.client import load_client client = load_client ( \"your-api-key-here\" ) dir ( client ) # show available resources Check out the API Docs for more details about the available resources and operations shown below. The docs can also be used to try out the API in the browser. Note Only the operation methods are shown in the following sections. You can make the actual request and access the response via response() and result , respectively: operation = client . projects . get_entries () resp = operation . response () # make blocking http request print ( resp . result ) # access the API response (result of the request)","title":"Programmatically retrieve MPContribs Data"},{"location":"api/#projects","text":"","title":"Projects"},{"location":"api/#fields","text":"field description project short URL-compatible name title short title to fit on contribution cards authors comma-separated list of authors description paragraph to describe project/dataset urls list of references in form of URLs other optional free-form content applicable to all contributions","title":"Fields"},{"location":"api/#operations","text":"","title":"Operations"},{"location":"api/#entries","text":"# retrieve list of all available projects/datasets client . projects . get_entries () # search projects for keywords client . projects . get_entries ( search = 'bandgap values' ) # use mask to control which fields to retrieve client . projects . get_entries ( mask = [ 'project' , 'authors' ])","title":"Entries"},{"location":"api/#entry","text":"# get info about specific project/dataset client . projects . get_entry ( project = 'dtu' ) # use mask to control which fields to retrieve client . projects . get_entry ( project = 'dtu' , mask = [ 'description' ])","title":"Entry"},{"location":"api/#table","text":"","title":"Table"},{"location":"api/#graph","text":"","title":"Graph"},{"location":"api/#contributions","text":"","title":"Contributions"},{"location":"api/#tables","text":"","title":"Tables"},{"location":"api/#structures","text":"","title":"Structures"}]}