{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Community Contributions to Materials Project Since its start in 2011, Materials Project (MP) has grown into a world-wide resource for a materials sciences community of more than 75,000 users who rely on the portal as a trusted source to accelerate their research. As a result, they wish to help with MP's efforts by contributing back, but also ask for support in sharing their experimental and computational datasets alongside MP's curated results. This provides the opportunity for researchers in both domains to validate calculations or measurements almost instantaneously and use the disseminated data for integrated materials studies. With the public announcement of our general contribution framework, MPContribs, we present a sustainable solution for well-curated data management, organization and dissemination in the context of MP. The framework serves the purpose of collectively maintaining contributions to MP community databases as annotations to existing MP materials. It subsequently disseminates them through MP's materials details pages as well as its portal and API . Visit the MPContribs Portal Checkout the MPContribs API Join the Slack Channel Post issues in GitHub Repo","title":"Home"},{"location":"#community-contributions-to-materials-project","text":"Since its start in 2011, Materials Project (MP) has grown into a world-wide resource for a materials sciences community of more than 75,000 users who rely on the portal as a trusted source to accelerate their research. As a result, they wish to help with MP's efforts by contributing back, but also ask for support in sharing their experimental and computational datasets alongside MP's curated results. This provides the opportunity for researchers in both domains to validate calculations or measurements almost instantaneously and use the disseminated data for integrated materials studies. With the public announcement of our general contribution framework, MPContribs, we present a sustainable solution for well-curated data management, organization and dissemination in the context of MP. The framework serves the purpose of collectively maintaining contributions to MP community databases as annotations to existing MP materials. It subsequently disseminates them through MP's materials details pages as well as its portal and API . Visit the MPContribs Portal Checkout the MPContribs API Join the Slack Channel Post issues in GitHub Repo","title":"Community Contributions to Materials Project"},{"location":"api/","text":"Programmatically retrieve MPContribs Data Use bravado as python client (see API Docs for details about available operations): from bravado.requests_client import RequestsClient from bravado.client import SwaggerClient host = 'api.mpcontribs.org' http_client = RequestsClient () http_client . set_api_key ( host , '<YOUR-MAPI-KEY>' , param_in = 'header' , param_name = 'x-api-key' ) apispec = 'https://{}/apispec.json' . format ( host ) client = SwaggerClient . from_url ( apispec , http_client = http_client , config = { 'validate_responses' : False }) dir ( client ) # available resources dir ( client . provenances ) # operations available on resource provs = client . provenances # shortcut # get provenance for all available projects/datasets resp = provs . get_provenances () . response () projects = [ r . project for r in resp . result ] # r.authors/title print ( projects ) # search provenance entries for keywords resp = provs . get_provenances ( search = 'bandgap values' ) . response () projects = [ r . project for r in resp . result ] print ( projects ) # get provenance for a specific project/dataset resp = provs . get_provenances_project ( project = 'dtu' ) . response () print ( resp . result . authors )","title":"API"},{"location":"api/#programmatically-retrieve-mpcontribs-data","text":"Use bravado as python client (see API Docs for details about available operations): from bravado.requests_client import RequestsClient from bravado.client import SwaggerClient host = 'api.mpcontribs.org' http_client = RequestsClient () http_client . set_api_key ( host , '<YOUR-MAPI-KEY>' , param_in = 'header' , param_name = 'x-api-key' ) apispec = 'https://{}/apispec.json' . format ( host ) client = SwaggerClient . from_url ( apispec , http_client = http_client , config = { 'validate_responses' : False }) dir ( client ) # available resources dir ( client . provenances ) # operations available on resource provs = client . provenances # shortcut # get provenance for all available projects/datasets resp = provs . get_provenances () . response () projects = [ r . project for r in resp . result ] # r.authors/title print ( projects ) # search provenance entries for keywords resp = provs . get_provenances ( search = 'bandgap values' ) . response () projects = [ r . project for r in resp . result ] print ( projects ) # get provenance for a specific project/dataset resp = provs . get_provenances_project ( project = 'dtu' ) . response () print ( resp . result . authors )","title":"Programmatically retrieve MPContribs Data"}]}